'use client';

import { useState, useRef, useEffect, useMemo } from 'react';
import GlassCard from '../ui/GlassCard';
import GlassButton from '../ui/GlassButton';

export default function VisualizationPanel({ file, onBack }) {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [visualizationHtml, setVisualizationHtml] = useState('');
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const messagesEndRef = useRef(null);
  const iframeRef = useRef(null);

  useEffect(() => {
    // Clear previous visualization when file changes
    setVisualizationHtml('');
    
    // Debug file object
    console.log('=== VisualizationPanel: File changed ===');
    console.log('File ID:', file.id);
    console.log('File name:', file.name);
    console.log('File has generatedHTML:', !!file.generatedHTML);
    console.log('File hasVisualization flag:', file.hasVisualization);
    console.log('File chatId:', file.chatId);
    
    // Load chat messages and visualizations for this file
    loadChatMessages();
    loadVisualizationFromChat();
  }, [file]);

  const loadChatMessages = async () => {
    try {
      const response = await fetch(`/api/chat/messages?fileId=${file.id}`);
      const data = await response.json();
      
      if (data.success && data.messages && data.messages.length > 0) {
        setMessages(data.messages);
        
        // Find the latest visualization in the messages (don't mutate original array)
        const latestVisualization = [...data.messages]
          .reverse()
          .find(msg => msg.hasVisualization && msg.visualizationHTML);
        
        console.log('Found visualization in chat:', !!latestVisualization);
        
        if (latestVisualization) {
          console.log('Setting visualization from chat message');
          setVisualizationHtml(latestVisualization.visualizationHTML);
        } else {
          console.log('No visualization in chat, using file HTML');
          loadGeminiVisualization();
        }
      } else {
        console.log('No chat messages found, using file HTML');
        setMessages([]);
        loadGeminiVisualization();
      }
    } catch (error) {
      console.error('Error loading chat messages:', error);
      console.log('Chat loading failed, using file HTML');
      setMessages([]);
      loadGeminiVisualization();
    }
  };

  const loadVisualizationFromChat = async () => {
    // This is handled in loadChatMessages now
  };

  const loadGeminiVisualization = () => {
    // Use the HTML generated by Gemini, or fallback to sample if not available
    let htmlContent = file.generatedHTML;
    
    console.log('Loading fallback visualization for file:', file.name);
    console.log('File HTML available:', !!htmlContent);
    console.log('File HTML length:', htmlContent?.length || 0);
    
    if (!htmlContent) {
      console.log('No file HTML found, using sample visualization');
      // Fallback sample HTML if Gemini HTML is not available
      htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
          <style>
            body { 
              margin: 0; 
              padding: 20px; 
              background: transparent; 
              color: white; 
              font-family: Inter, sans-serif; 
            }
            .chart-container { 
              width: 100%; 
              height: 500px; 
            }
          </style>
      </head>
      <body>
        <div class="chart-container" id="chart"></div>
        <script>
          // Sample data - this would be generated from actual file data
          const trace1 = {
            x: ['Q1', 'Q2', 'Q3', 'Q4'],
            y: [20, 14, 23, 25],
            type: 'scatter',
            mode: 'lines+markers',
            name: 'Revenue',
            line: { color: '#00d4ff', width: 3 },
            marker: { color: '#00d4ff', size: 8 }
          };
          
          const trace2 = {
            x: ['Q1', 'Q2', 'Q3', 'Q4'],
            y: [16, 18, 17, 19],
            type: 'scatter',
            mode: 'lines+markers',
            name: 'Costs',
            line: { color: '#10b981', width: 3 },
            marker: { color: '#10b981', size: 8 }
          };
          
          const layout = {
            title: {
              text: 'Data Analysis for ${file.name}',
              font: { color: 'white', size: 18 }
            },
            paper_bgcolor: 'rgba(0,0,0,0)',
            plot_bgcolor: 'rgba(0,0,0,0)',
            xaxis: { 
              color: 'white',
              gridcolor: 'rgba(255,255,255,0.1)'
            },
            yaxis: { 
              color: 'white',
              gridcolor: 'rgba(255,255,255,0.1)'
            },
            legend: { 
              font: { color: 'white' }
            }
          };
          
          Plotly.newPlot('chart', [trace1, trace2], layout, {
            responsive: true,
            displayModeBar: false
          });
        </script>
      </body>
      </html>
      `;
    }
    
    // Clean up any HTML tags that might interfere with iframe display
    const cleanedHtml = htmlContent
      .replace(/```html/g, '')
      .replace(/```/g, '')
      .trim();
    
    console.log('Cleaned HTML length:', cleanedHtml.length);
    console.log('Setting visualization HTML in state');
    
    if (cleanedHtml.length > 0) {
      setVisualizationHtml(cleanedHtml);
      console.log('✅ Visualization HTML set successfully');
    } else {
      console.log('❌ Cleaned HTML is empty');
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Previous cleanup code moved to iframeSrc useEffect above

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    const userMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    const currentInput = inputValue;
    setInputValue(''); // Clear input immediately
    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);

    try {
      // Send message to chat API for visualization
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: currentInput,
          fileId: file.id
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to get AI response');
      }

      const aiResponse = {
        id: result.chatId || Date.now().toString(),
        type: 'assistant',
        content: result.response,
        timestamp: new Date(),
        hasVisualization: result.hasVisualization
      };

      setMessages(prev => [...prev, aiResponse]);

      // Update visualization if the response contains HTML
      if (result.hasVisualization && result.extractedHTML) {
        setVisualizationHtml(result.extractedHTML);
      }
      
      setIsLoading(false);
    } catch (error) {
      console.error('Chat error:', error);
      
      // Add error message to chat
      const errorResponse = {
        id: Date.now().toString(),
        type: 'assistant',
        content: `Sorry, I encountered an error: ${error.message}. Please try again.`,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorResponse]);
      setIsLoading(false);
    }
  };

  const updateVisualization = (type) => {
    // Simulate different chart types - this would come from Gemini API
    const chartHtmlTemplates = {
      bar: `
        <!DOCTYPE html>
        <html>
        <head>
          <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
          <style>
            body { margin: 0; padding: 20px; background: transparent; color: white; font-family: Inter, sans-serif; }
            .chart-container { width: 100%; height: 500px; }
          </style>
        </head>
        <body>
          <div class="chart-container" id="chart"></div>
          <script>
            const trace = {
              x: ['Q1', 'Q2', 'Q3', 'Q4'],
              y: [20, 14, 23, 25],
              type: 'bar',
              marker: { color: '#00d4ff' }
            };
            const layout = {
              title: { text: 'Bar Chart View', font: { color: 'white' } },
              paper_bgcolor: 'rgba(0,0,0,0)',
              plot_bgcolor: 'rgba(0,0,0,0)',
              xaxis: { color: 'white', gridcolor: 'rgba(255,255,255,0.1)' },
              yaxis: { color: 'white', gridcolor: 'rgba(255,255,255,0.1)' }
            };
            Plotly.newPlot('chart', [trace], layout, { responsive: true, displayModeBar: false });
          </script>
        </body>
        </html>
      `,
      pie: `
        <!DOCTYPE html>
        <html>
        <head>
          <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
          <style>
            body { margin: 0; padding: 20px; background: transparent; color: white; font-family: Inter, sans-serif; }
            .chart-container { width: 100%; height: 500px; }
          </style>
        </head>
        <body>
          <div class="chart-container" id="chart"></div>
          <script>
            const trace = {
              values: [35, 25, 20, 20],
              labels: ['Category A', 'Category B', 'Category C', 'Category D'],
              type: 'pie',
              marker: { colors: ['#00d4ff', '#10b981', '#3b82f6', '#8b5cf6'] }
            };
            const layout = {
              title: { text: 'Distribution Breakdown', font: { color: 'white' } },
              paper_bgcolor: 'rgba(0,0,0,0)',
              plot_bgcolor: 'rgba(0,0,0,0)',
              font: { color: 'white' }
            };
            Plotly.newPlot('chart', [trace], layout, { responsive: true, displayModeBar: false });
          </script>
        </body>
        </html>
      `,
      scatter: `
        <!DOCTYPE html>
        <html>
        <head>
          <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
          <style>
            body { margin: 0; padding: 20px; background: transparent; color: white; font-family: Inter, sans-serif; }
            .chart-container { width: 100%; height: 500px; }
          </style>
        </head>
        <body>
          <div class="chart-container" id="chart"></div>
          <script>
            const trace = {
              x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              y: [2, 4, 3, 8, 6, 9, 7, 12, 10, 15],
              mode: 'markers',
              type: 'scatter',
              marker: { color: '#00d4ff', size: 12 }
            };
            const layout = {
              title: { text: 'Correlation Analysis', font: { color: 'white' } },
              paper_bgcolor: 'rgba(0,0,0,0)',
              plot_bgcolor: 'rgba(0,0,0,0)',
              xaxis: { color: 'white', gridcolor: 'rgba(255,255,255,0.1)' },
              yaxis: { color: 'white', gridcolor: 'rgba(255,255,255,0.1)' }
            };
            Plotly.newPlot('chart', [trace], layout, { responsive: true, displayModeBar: false });
          </script>
        </body>
        </html>
      `,
      outliers: `
        <!DOCTYPE html>
        <html>
        <head>
          <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
          <style>
            body { margin: 0; padding: 20px; background: transparent; color: white; font-family: Inter, sans-serif; }
            .chart-container { width: 100%; height: 500px; }
          </style>
        </head>
        <body>
          <div class="chart-container" id="chart"></div>
          <script>
            const normal = {
              x: [1, 2, 3, 4, 5, 6, 7, 8],
              y: [2, 4, 3, 5, 4, 6, 5, 7],
              mode: 'markers',
              type: 'scatter',
              name: 'Normal Data',
              marker: { color: '#10b981', size: 10 }
            };
            const outliers = {
              x: [3.5, 6.5],
              y: [15, 18],
              mode: 'markers',
              type: 'scatter',
              name: 'Outliers',
              marker: { color: '#ef4444', size: 14, symbol: 'diamond' }
            };
            const layout = {
              title: { text: 'Outlier Detection', font: { color: 'white' } },
              paper_bgcolor: 'rgba(0,0,0,0)',
              plot_bgcolor: 'rgba(0,0,0,0)',
              xaxis: { color: 'white', gridcolor: 'rgba(255,255,255,0.1)' },
              yaxis: { color: 'white', gridcolor: 'rgba(255,255,255,0.1)' },
              legend: { font: { color: 'white' } }
            };
            Plotly.newPlot('chart', [normal, outliers], layout, { responsive: true, displayModeBar: false });
          </script>
        </body>
        </html>
      `
    };
    
    setVisualizationHtml(chartHtmlTemplates[type] || chartHtmlTemplates.bar);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  // Memoized iframe src to prevent re-creation on every render
  const iframeSrc = useMemo(() => {
    if (!visualizationHtml) return '';
    const blob = new Blob([visualizationHtml], { type: 'text/html' });
    return URL.createObjectURL(blob);
  }, [visualizationHtml]);

  // Cleanup previous blob URL when visualization changes
  useEffect(() => {
    return () => {
      if (iframeSrc) {
        URL.revokeObjectURL(iframeSrc);
      }
    };
  }, [iframeSrc]);

  const suggestedQuestions = [
    "Create a bar chart of this data",
    "Show me outliers in red",
    "Generate a pie chart breakdown", 
    "What correlations do you see?",
    "Create an interactive scatter plot"
  ];

  return (
    <div className="flex h-screen">
      {/* Main Visualization Area */}
      <div className={`transition-all duration-300 ${sidebarOpen ? 'w-3/5' : 'w-4/5'}`}>
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-white/10 bg-black/20 backdrop-blur-sm">
          <div className="flex items-center space-x-4">
            <button
              onClick={onBack}
              className="p-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors"
            >
              <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <div>
              <h1 className="text-xl font-semibold text-white">{file.name}</h1>
              <p className="text-sm text-gray-400">Interactive visualization with AI insights</p>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-cyan-400 rounded-full animate-pulse" />
              <span className="text-sm text-gray-400">Live Data</span>
            </div>
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="p-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors"
            >
              <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                  d={sidebarOpen ? "M9 5l7 7-7 7" : "M15 19l-7-7 7-7"} />
              </svg>
            </button>
          </div>
        </div>

        {/* Visualization Controls */}
        <div className="p-4 border-b border-white/10 bg-black/10">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-400">Interactive Visualization</span>
              <div className="flex items-center space-x-2 px-3 py-1 bg-emerald-500/10 border border-emerald-500/20 rounded-full">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse" />
                <span className="text-emerald-300 text-xs font-medium">Live</span>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <button className="px-3 py-1 bg-white/5 hover:bg-white/10 rounded-lg text-xs text-gray-300 hover:text-white transition-colors">
                <svg className="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                </svg>
                Export
              </button>
              <button className="px-3 py-1 bg-white/5 hover:bg-white/10 rounded-lg text-xs text-gray-300 hover:text-white transition-colors">
                <svg className="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh
              </button>
            </div>
          </div>
        </div>

        {/* Visualization Area */}
        <div className="flex-1 p-6 h-[calc(100vh-140px)]">
          <GlassCard className="h-full p-6 rounded-xl">
            <div className="h-full bg-black/20 rounded-lg border border-white/10 overflow-hidden">
              {visualizationHtml ? (
                <iframe
                  ref={iframeRef}
                  src={iframeSrc}
                  className="w-full h-full border-0"
                  title="Data Visualization"
                  sandbox="allow-scripts allow-same-origin"
                />
              ) : (
                /* Loading State */
                <div className="h-full flex items-center justify-center">
                  <div className="text-center space-y-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-cyan-400 to-cyan-600 rounded-xl flex items-center justify-center mx-auto animate-pulse">
                      <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="text-white font-semibold mb-2">Generating Visualization</h3>
                      <p className="text-gray-400 text-sm">AI is analyzing your data and creating charts...</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </GlassCard>
        </div>
      </div>

      {/* Chat Sidebar */}
      <div className={`transition-all duration-300 border-l border-white/10 bg-black/20 backdrop-blur-sm ${
        sidebarOpen ? 'w-2/5' : 'w-1/5'
      }`}>
        {sidebarOpen ? (
          <div className="flex flex-col h-full">
            {/* Chat Header */}
            <div className="p-4 border-b border-white/10">
              <h2 className="text-lg font-semibold text-white">AI Insights</h2>
              <p className="text-sm text-gray-400">Ask questions about your visualization</p>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message) => (
                <div key={message.id} className={`${message.type === 'user' ? 'ml-8' : 'mr-8'}`}>
                  {message.type === 'assistant' && (
                    <div className="flex items-center space-x-2 mb-1">
                      <div className="w-4 h-4 bg-emerald-400 rounded-full" />
                      <span className="text-xs text-gray-400">Caira</span>
                    </div>
                  )}
                  <div className={`p-3 rounded-lg text-sm ${
                    message.type === 'user' 
                      ? 'bg-cyan-500/20 border border-cyan-500/30 text-cyan-100' 
                      : 'bg-white/5 border border-white/10 text-white'
                  }`}>
                    {message.content}
                  </div>
                </div>
              ))}

              {isLoading && (
                <div className="mr-8">
                  <div className="flex items-center space-x-2 mb-1">
                    <div className="w-4 h-4 bg-emerald-400 rounded-full" />
                    <span className="text-xs text-gray-400">Caira</span>
                  </div>
                  <div className="p-3 rounded-lg bg-white/5 border border-white/10">
                    <div className="flex items-center space-x-2">
                      <div className="flex space-x-1">
                        <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" />
                        <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                        <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                      </div>
                      <span className="text-xs text-gray-400">Analyzing...</span>
                    </div>
                  </div>
                </div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Suggested Questions */}
            {messages.length === 1 && (
              <div className="p-4 border-t border-white/10">
                <div className="space-y-2">
                  {suggestedQuestions.slice(0, 3).map((question, index) => (
                    <button
                      key={index}
                      onClick={() => setInputValue(question)}
                      className="w-full text-left px-3 py-2 bg-white/5 hover:bg-white/10 border border-white/10 rounded-lg text-xs text-gray-300 hover:text-white transition-colors"
                    >
                      {question}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Input */}
            <div className="p-4 border-t border-white/10">
              <form onSubmit={handleSubmit}>
                <div className="relative">
                  <textarea
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Ask about the chart..."
                    className="w-full px-3 py-2 pr-10 bg-white/5 border border-white/10 rounded-lg text-white placeholder-gray-400 text-sm resize-none focus:outline-none focus:ring-2 focus:ring-cyan-500/50"
                    rows={2}
                  />
                  <button
                    type="submit"
                    disabled={!inputValue.trim() || isLoading}
                    className="absolute right-2 bottom-2 p-1 bg-cyan-500 hover:bg-cyan-600 disabled:bg-gray-600 disabled:opacity-50 rounded transition-colors"
                  >
                    <svg className="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                  </button>
                </div>
              </form>
            </div>
          </div>
        ) : (
          // Collapsed chat view
          <div className="p-4 text-center">
            <div className="text-gray-400 text-sm mb-2">Chat</div>
            <div className="w-2 h-2 bg-emerald-400 rounded-full mx-auto animate-pulse" />
          </div>
        )}
      </div>
    </div>
  );
} 